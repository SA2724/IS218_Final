name: Run Tests on Push or Pull Request to Main

on:
  push:
    branches:
      - main  # Triggers workflow on any push to the main branch
  pull_request:
    branches:
      - main  # Triggers workflow on any pull request targeting the main branch

jobs:
  test:
    runs-on: ubuntu-latest  # Uses the latest Ubuntu runner

    steps:
      # 1. Check Out the Repository
      - name: Check out the code
        uses: actions/checkout@v3

      # 2. Set Up Python Environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Specify your desired Python version

      # 3. Install System Dependencies for Playwright
      - name: Install system dependencies for Playwright
        run: |
          sudo apt-get update
          sudo apt-get install -y libwoff1 libvpx9 libevent-2.1-7t64 libopus0 \
            libgstreamer-plugins-base1.0-0 libgstreamer-gl1.0-0 \
            libgstreamer-plugins-bad1.0-0 libflite1 libavif16 \
            libharfbuzz-icu0 libsecret-1-0 libhyphen0 libmanette-0.2-0 \
            libgles2 gstreamer1.0-libav

      # 4. Install Python Dependencies
      - name: Install dependencies from requirements.txt
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 5. Install Playwright Browsers and Dependencies
      - name: Install Playwright Browsers
        run: |
          pip install playwright
          playwright install --with-deps

      # 6. Create .env.test File with Correct Variables
      - name: Create .env.test file
        run: |
          mkdir -p tests/unity
          echo "db_host=sqlite:///:memory:" > tests/unity/.env.test
          echo "db_user=postgres" >> tests/unity/.env.test
          echo "db_password=" >> tests/unity/.env.test
          echo "db_name=" >> tests/unity/.env.test
          echo "db_port=0" >> tests/unity/.env.test
          echo "salt=aafasdfsdfsdfasdf" >> tests/unity/.env.test
          echo "API_KEY=${{ secrets.API_KEY }}" >> tests/unity/.env.test

      # 7. Start FastAPI Server
      - name: Start FastAPI server
        run: |
          nohup uvicorn main:app --host 0.0.0.0 --port 8000 > server.log 2>&1 &
          echo "FastAPI server started"

      # 8. Wait for FastAPI Server to be Ready
      - name: Wait for FastAPI server to be ready
        run: |
          echo "Waiting for FastAPI server to be ready..."
          for i in {1..30}; do
            nc -z localhost 8000 && break
            echo "FastAPI server not ready yet. Waiting..."
            sleep 1
          done
          nc -z localhost 8000

      # 9. Run Tests with Pytest and Enforce Coverage
      - name: Run tests with pytest and enforce 50% coverage
        run: |
          pytest --cov=app --cov-fail-under=50 --cov-report=xml --cov-report=term-missing
