name: Run Tests on Push or Pull Request to Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Adjust as needed

      - name: Install system dependencies for Playwright
        run: |
          sudo apt-get update
          sudo apt-get install -y libwoff1 libvpx9 libevent-2.1-7t64 libopus0 \
            libgstreamer-plugins-base1.0-0 libgstreamer-gl1.0-0 \
            libgstreamer-plugins-bad1.0-0 libflite1 libavif16 \
            libharfbuzz-icu0 libsecret-1-0 libhyphen0 libmanette-0.2-0 \
            libgles2 gstreamer1.0-libav

      - name: Install dependencies from requirements.txt
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright Browsers
        run: |
          pip install playwright
          playwright install --with-deps

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 && break
            echo "PostgreSQL not ready yet. Waiting..."
            sleep 1
          done
          pg_isready -h localhost -p 5432

      - name: Run tests with pytest and enforce 50% coverage
        env:
          db_host: localhost
          db_user: ${{ secrets.DB_USER }}
          db_password: ${{ secrets.DB_PASSWORD }}
          db_name: ${{ secrets.DB_NAME }}
          db_port: 5432
          salt: ${{ secrets.SALT }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          pytest --cov=app --cov-fail-under=50 --cov-report=xml --cov-report=term-missing

      # Optional: Upload coverage to Codecov
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./coverage.xml
      #     flags: unittests
      #     name: codecov-umbrella
      #     fail_ci_if_error: true

      # Optional: Show PostgreSQL Logs on Failure for Debugging
      - name: Show PostgreSQL Logs on Failure
        if: failure()
        run: docker logs ${{ job.services.postgres.id }}
